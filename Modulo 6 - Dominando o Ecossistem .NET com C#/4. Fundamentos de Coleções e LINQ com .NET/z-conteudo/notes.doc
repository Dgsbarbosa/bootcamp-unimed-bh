Fundamentos de Coleções e LINQ com .NET

    Introdução Arrays

        Arrays armazenam valores do mesmo tipo

            1. int[] array = new int[4];

            2. int[] array = new int[] {42,72,74,61};

            3. string[] meses = {"Jan", "Fev"};

            ver Slide Aula 1

    

    Criada a pasta projetos e a pasta colecoes

        dotnet new sln --name Nome (cria uma solution, um agrupamento dos projetos)

        code . (abre a pasta no vscode)


        Para habilitar o Intellisence dentro arquivo Program.cs Aperta F1 e digite omnisharp:select project


    Manipulando Arrays

        Algoritmos de ordenação

            Bubble sort

        
    Classe Array (ver Slide Aula 2)

        A Classe Array é uma classe C# que nos oferece diversos métodos que nos auxiliam a trabalhar com arrays 

    Ordenando pela classe Array
            Para importar o using System segura ctrl  e aperta . ponto

        Metodo sort

            Array.Sort()

        Copiando um Array 

            Array.Copy()

        Verificando um elemento existente

            Array.Exists()

        
        Verificando todos os elementos do array

            Array.TrueForAll()

        Encontrando um elemento no array

            Array.Find()            
            Array.FindIndex()
            Array.FindLast()
            Array.FindLastIndex()
            
        
        Encontrando o índice de um valor

            Array.FindAll(); (aceita uma expressão)

            ou

            Array.IndexOff();



        Redimensionando um array

            Array.Resize();


        Convertendo um array

            Array.ConvetAll();



 Introdução coleções genéricas (Slide Aula 3)

    Declarando e acessando uma lista

        Importe o System.Collection.Generic apertando ctrl + . (ponto)

            List<string> nomeDaLista = new List<string>();

            nomeDaLista.(ponto); revela uma gama de opções

            criado o arquivo lista



    Removendo elemento da lista

        nomeDaLista.Remove("parametro");

    Adicionando coleções na lista

        nomeDaLista.AddRange("item que quer add"); (adiciona uma coleção dentro de outra coleção).

    Adicionando elemento por índice

        nomeDaLista.Insert(indice, "O item a ser inserido";)



Coleções Especificas (Slide Aula 4)

    Queue (Fila): Obedece a ordem FIFO (First In First Out)
    Stack (Pilha): Obedece a ordem LIFO (Last In First Out)

    Introdução a Fila

        Filas na prática

            Queue<string> nome = new Queue<string>()

            Add na Fila

                nome.Enqueue

    Introdução a Pilha

        Pilha sai primeiro o ultimo elemento que entrou

Dicionarios  (Slide Aula 5)

    Usa-se

        Dictionary<string,string> nome = new Dictionary<string,string>();


    Acessando um valor

        no projetos

    Removendo um valor

        nome.Remove();

    Acessando de maneira segura

        TryGetValue();

Operações LINQ (Slide Aula 6)

    Language-Integrad Query (LINQ)

        Ha duas formas de usar o LINQ, pela query e pelo Metodo

        Obtendo e ordenando valores com LINQ

            Ex:
            int[] arrayNumeros = new int[5] {1,4,8,15,19};

                //com query
                var numerosParesQuery = 
                    from num in arrayNumeros
                    where num %2 ==0
                    orderby num
                    select num;

                //com metodo

                var numerosParesMetodo = arrayNumeros.Where(x => x%2 == 0).OrderBy(x=>x).ToList();

                System.Console.WriteLine("Numeros pares query: " + string.Join(", ",numerosParesQuery));

                System.Console.WriteLine("Numeros pares metodo: " + string.Join(", ",numerosParesMetodo));


        Valores mínimo, máximo e médio com LINQ


            Ex.

                var minimo = arrayNumeros.Mnin();
                var maximo = arrayNumeros.Max();
                var medio = arrayNumeros.Average();

        Sum e Distinct

            Ex.:

                var soma = arrayNumeros.Sum(); //Sum
                var arrayUnico = arrayNumeros.Distinct().ToArray(); //Distinct























        
